// MongoDB initialization script for HerShield
print('üõ°Ô∏è Initializing HerShield MongoDB Database...');

// Switch to hershield database
db = db.getSiblingDB('hershield');

// Create application user
db.createUser({
  user: 'hershield-app',
  pwd: 'hershield-app-password',
  roles: [
    {
      role: 'readWrite',
      db: 'hershield'
    }
  ]
});

// Create collections with validation
print('üìù Creating collections...');

// Users collection
db.createCollection('users', {
  validator: {
    $jsonSchema: {
      bsonType: 'object',
      required: ['firstName', 'lastName', 'email', 'password'],
      properties: {
        firstName: {
          bsonType: 'string',
          minLength: 2,
          maxLength: 50
        },
        lastName: {
          bsonType: 'string',
          minLength: 2,
          maxLength: 50
        },
        email: {
          bsonType: 'string',
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        },
        role: {
          enum: ['user', 'moderator', 'admin']
        },
        isActive: {
          bsonType: 'bool'
        },
        safetyScore: {
          bsonType: 'number',
          minimum: 0,
          maximum: 100
        }
      }
    }
  }
});

// ThreatReports collection
db.createCollection('threatreports', {
  validator: {
    $jsonSchema: {
      bsonType: 'object',
      required: ['userId', 'content', 'threatType', 'riskLevel'],
      properties: {
        userId: {
          bsonType: 'objectId'
        },
        riskLevel: {
          enum: ['low', 'medium', 'high', 'critical']
        },
        status: {
          enum: ['pending_review', 'under_investigation', 'resolved', 'dismissed', 'urgent']
        },
        threatType: {
          bsonType: 'array',
          items: {
            enum: [
              'harassment', 'cyberbullying', 'stalking', 'hate_speech',
              'sexual_harassment', 'doxxing', 'impersonation',
              'threats_of_violence', 'blackmail', 'image_abuse',
              'domestic_violence', 'assault', 'other'
            ]
          }
        }
      }
    }
  }
});

// SafetyTips collection
db.createCollection('safetytips', {
  validator: {
    $jsonSchema: {
      bsonType: 'object',
      required: ['title', 'content', 'category', 'author'],
      properties: {
        title: {
          bsonType: 'string',
          minLength: 5,
          maxLength: 200
        },
        category: {
          enum: ['privacy', 'harassment', 'emergency', 'dating', 'workplace', 'general']
        },
        priority: {
          bsonType: 'number',
          minimum: 1,
          maximum: 10
        },
        isActive: {
          bsonType: 'bool'
        }
      }
    }
  }
});

// Create indexes for performance
print('üöÄ Creating indexes...');

// Users indexes
db.users.createIndex({ email: 1 }, { unique: true });
db.users.createIndex({ role: 1, isActive: 1 });
db.users.createIndex({ safetyScore: 1 });
db.users.createIndex({ createdAt: 1 });
db.users.createIndex({ 'location.coordinates': '2dsphere' });

// ThreatReports indexes
db.threatreports.createIndex({ userId: 1, createdAt: -1 });
db.threatreports.createIndex({ riskLevel: 1, status: 1 });
db.threatreports.createIndex({ context: 1, threatType: 1 });
db.threatreports.createIndex({ autoGenerated: 1, status: 1 });
db.threatreports.createIndex({ status: 1, createdAt: -1 });

// SafetyTips indexes
db.safetytips.createIndex({ category: 1, isActive: 1, priority: -1 });
db.safetytips.createIndex({ tags: 1, isActive: 1 });
db.safetytips.createIndex({ targetAudience: 1, category: 1 });
db.safetytips.createIndex({ 
  title: 'text', 
  content: 'text', 
  tags: 'text' 
}, { 
  weights: { 
    title: 10, 
    content: 5, 
    tags: 8 
  } 
});

// Insert initial safety tips
print('üìö Inserting initial safety tips...');

const adminUserId = ObjectId();

// Create admin user first
db.users.insertOne({
  _id: adminUserId,
  firstName: 'HerShield',
  lastName: 'Admin',
  email: 'admin@hershield.com',
  password: '$2b$12$rQj7YgJfGJ5J5J5J5J5J5eMfVQJ5J5J5J5J5J5J5J5J5J5J5J5J5J5', // placeholder hash
  role: 'admin',
  isActive: true,
  isVerified: true,
  safetyScore: 100,
  safetySettings: {
    shareLocationWithContacts: false,
    enableEmergencyAlert: true,
    enableAIModeration: true,
    blockUnknownContacts: false,
    autoReportThreats: true
  },
  privacySettings: {
    profileVisibility: 'private',
    shareLocation: false,
    shareStatus: false,
    allowDirectMessages: false
  },
  twoFactorAuth: {
    enabled: false
  },
  loginAttempts: 0,
  reportsMade: 0,
  reportsReceived: 0,
  emergencyContacts: [],
  notifications: {
    email: true,
    sms: false,
    push: true,
    safety: true,
    marketing: false
  },
  subscription: {
    plan: 'premium',
    features: ['ai_analysis', 'emergency_response', 'priority_support']
  },
  createdAt: new Date(),
  updatedAt: new Date()
});

// Insert initial safety tips
const safetyTips = [
  {
    title: 'Protect Your Personal Information Online',
    content: 'Never share personal details like your home address, phone number, or financial information with strangers online. Be cautious about what you post on social media platforms.',
    category: 'privacy',
    priority: 9,
    isActive: true,
    tags: ['privacy', 'personal-info', 'social-media'],
    author: adminUserId,
    targetAudience: 'all',
    language: 'en',
    views: 0,
    likes: 0,
    shares: 0,
    createdAt: new Date(),
    updatedAt: new Date(),
    lastUpdated: new Date()
  },
  {
    title: 'Recognizing Online Harassment',
    content: 'Online harassment can include threats, hate speech, doxxing, or persistent unwanted contact. Trust your instincts - if something feels wrong, it probably is. Document evidence and report immediately.',
    category: 'harassment',
    priority: 10,
    isActive: true,
    tags: ['harassment', 'cyberbullying', 'documentation'],
    author: adminUserId,
    targetAudience: 'all',
    language: 'en',
    views: 0,
    likes: 0,
    shares: 0,
    createdAt: new Date(),
    updatedAt: new Date(),
    lastUpdated: new Date()
  },
  {
    title: 'Emergency Safety Planning',
    content: 'Create a safety plan that includes emergency contacts, safe places to go, and important documents. Share your plan with trusted friends or family members.',
    category: 'emergency',
    priority: 10,
    isActive: true,
    tags: ['emergency', 'safety-plan', 'preparation'],
    author: adminUserId,
    targetAudience: 'all',
    language: 'en',
    views: 0,
    likes: 0,
    shares: 0,
    createdAt: new Date(),
    updatedAt: new Date(),
    lastUpdated: new Date()
  },
  {
    title: 'Safe Online Dating Tips',
    content: 'Always meet in public places, tell someone about your plans, trust your instincts, and use video calls before meeting in person. Never share financial information.',
    category: 'dating',
    priority: 8,
    isActive: true,
    tags: ['dating', 'meeting-safely', 'trust'],
    author: adminUserId,
    targetAudience: 'young_adults',
    language: 'en',
    views: 0,
    likes: 0,
    shares: 0,
    createdAt: new Date(),
    updatedAt: new Date(),
    lastUpdated: new Date()
  },
  {
    title: 'Workplace Digital Safety',
    content: 'Be cautious about what you share on work platforms, maintain professional boundaries in digital communications, and report any inappropriate behavior immediately.',
    category: 'workplace',
    priority: 7,
    isActive: true,
    tags: ['workplace', 'professional', 'boundaries'],
    author: adminUserId,
    targetAudience: 'adults',
    language: 'en',
    views: 0,
    likes: 0,
    shares: 0,
    createdAt: new Date(),
    updatedAt: new Date(),
    lastUpdated: new Date()
  }
];

db.safetytips.insertMany(safetyTips);

print('‚úÖ HerShield database initialization complete!');
print('üìä Database statistics:');
print('   Users: ' + db.users.countDocuments());
print('   Safety Tips: ' + db.safetytips.countDocuments());
print('   Collections: ' + db.getCollectionNames().length);
