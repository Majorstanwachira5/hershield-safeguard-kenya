import { Response, NextFunction } from 'express';
import { AuthRequest } from '../middleware/auth';
import { asyncHandler, createError } from '../middleware/errorHandler';
import { User } from '../models/User';
import { ThreatReport } from '../models/ThreatReport';
import { SafetyTip } from '../models/SafetyTip';
import { logger } from '../utils/logger';

// @desc    Get safety dashboard data
// @route   GET /api/v1/safety/dashboard
// @access  Private
export const getSafetyDashboard = asyncHandler(async (req: AuthRequest, res: Response, next: NextFunction) => {
  const user = await User.findById(req.user.id);
  if (!user) {
    return next(createError('User not found', 404));
  }

  // Get threat reports for this user
  const threatReports = await ThreatReport.find({ userId: req.user.id })
    .sort({ createdAt: -1 })
    .limit(10);

  // Get recent safety tips
  const safetyTips = await SafetyTip.find({ isActive: true })
    .sort({ priority: -1, createdAt: -1 })
    .limit(5);

  // Calculate dashboard metrics
  const metrics = {
    safetyScore: user.safetyScore,
    reportsCount: user.reportsMade,
    threatsBlocked: await ThreatReport.countDocuments({ 
      userId: req.user.id, 
      status: { $in: ['resolved', 'dismissed'] } 
    }),
    activeThreatMonitoring: user.safetySettings.enableAIModeration
  };

  res.status(200).json({
    success: true,
    data: {
      metrics,
      recentReports: threatReports.slice(0, 3),
      safetyTips,
      user: {
        safetySettings: user.safetySettings,
        emergencyContactsCount: user.emergencyContacts.length
      }
    }
  });
});

// @desc    Get safety metrics
// @route   GET /api/v1/safety/metrics  
// @access  Private
export const getSafetyMetrics = asyncHandler(async (req: AuthRequest, res: Response, next: NextFunction) => {
  const userId = req.user.id;
  
  const user = await User.findById(userId);
  
  // Get basic threat stats
  const threatStats = [{
    total: 0, critical: 0, high: 0, medium: 0, low: 0,
    pending: 0, resolved: 0, autoGenerated: 0
  }];

  if (!user) {
    return next(createError('User not found', 404));
  }

  const stats = threatStats[0] || {
    total: 0, critical: 0, high: 0, medium: 0, low: 0,
    pending: 0, resolved: 0, autoGenerated: 0
  };

  res.status(200).json({
    success: true,
    data: {
      safetyScore: user.safetyScore,
      threatStats: stats,
      reportsMade: user.reportsMade,
      reportsReceived: user.reportsReceived,
      accountSafety: {
        emailVerified: user.isVerified,
        twoFactorEnabled: user.twoFactorAuth.enabled,
        emergencyContactsSet: user.emergencyContacts.length > 0,
        aiModerationEnabled: user.safetySettings.enableAIModeration
      }
    }
  });
});

// @desc    Get threat reports for user
// @route   GET /api/v1/safety/reports
// @access  Private
export const getThreatReports = asyncHandler(async (req: AuthRequest, res: Response, next: NextFunction) => {
  const {
    page = 1,
    limit = 20,
    status,
    riskLevel,
    threatType
  } = req.query;

  const query: any = {};
  
  // Users can only see their own reports unless admin/moderator
  if (!['admin', 'moderator'].includes(req.user.role)) {
    query.userId = req.user.id;
  }
  
  if (status) query.status = status;
  if (riskLevel) query.riskLevel = riskLevel;
  if (threatType) query.threatType = { $in: [threatType] };

  const skip = (parseInt(page as string) - 1) * parseInt(limit as string);
  
  const reports = await ThreatReport.find(query)
    .populate('userId', 'firstName lastName email')
    .skip(skip)
    .limit(parseInt(limit as string))
    .sort({ createdAt: -1 });
    
  const total = await ThreatReport.countDocuments(query);

  res.status(200).json({
    success: true,
    data: {
      reports,
      pagination: {
        current: parseInt(page as string),
        pages: Math.ceil(total / parseInt(limit as string)),
        total
      }
    }
  });
});

// @desc    Get specific threat report
// @route   GET /api/v1/safety/reports/:reportId
// @access  Private
export const getThreatReport = asyncHandler(async (req: AuthRequest, res: Response, next: NextFunction) => {
  const { reportId } = req.params;
  
  const query: any = { _id: reportId };
  
  // Users can only see their own reports unless admin/moderator
  if (!['admin', 'moderator'].includes(req.user.role)) {
    query.userId = req.user.id;
  }
  
  const report = await ThreatReport.findOne(query)
    .populate('userId', 'firstName lastName email')
    .populate('humanReview.reviewerId', 'firstName lastName');
  
  if (!report) {
    return next(createError('Threat report not found', 404));
  }

  res.status(200).json({
    success: true,
    data: { report }
  });
});

// @desc    Update threat report status (admin/moderator only)
// @route   PUT /api/v1/safety/reports/:reportId/status
// @access  Private/Admin/Moderator
export const updateThreatReportStatus = asyncHandler(async (req: AuthRequest, res: Response, next: NextFunction) => {
  const { reportId } = req.params;
  const { status, reviewNotes, actionTaken, resolutionType } = req.body;
  
  const report = await ThreatReport.findById(reportId);
  if (!report) {
    return next(createError('Threat report not found', 404));
  }

  // Update report status and human review
  report.status = status;
  
  if (reviewNotes || actionTaken) {
    report.humanReview = {
      ...report.humanReview,
      reviewerId: req.user.id,
      reviewDate: new Date(),
      reviewNotes,
      actionTaken,
      followUpRequired: status === 'under_investigation'
    };
  }

  if (status === 'resolved' && resolutionType) {
    report.resolution = {
      resolvedDate: new Date(),
      resolutionType,
      resolutionNotes: reviewNotes
    };
  }

  await report.save();

  logger.info(`Threat report ${reportId} status updated to ${status} by ${req.user.email}`);

  res.status(200).json({
    success: true,
    message: 'Threat report status updated successfully',
    data: { report }
  });
});

// @desc    Delete threat report (admin only)
// @route   DELETE /api/v1/safety/reports/:reportId
// @access  Private/Admin
export const deleteThreatReport = asyncHandler(async (req: AuthRequest, res: Response, next: NextFunction) => {
  const { reportId } = req.params;
  
  const report = await ThreatReport.findById(reportId);
  if (!report) {
    return next(createError('Threat report not found', 404));
  }

  await report.deleteOne();

  logger.info(`Threat report ${reportId} deleted by ${req.user.email}`);

  res.status(200).json({
    success: true,
    message: 'Threat report deleted successfully'
  });
});

// @desc    Get safety tips
// @route   GET /api/v1/safety/tips
// @access  Private
export const getSafetyTips = asyncHandler(async (req: AuthRequest, res: Response, next: NextFunction) => {
  const { category, isActive = true } = req.query;
  
  const query: any = { isActive };
  if (category) query.category = category;

  const tips = await SafetyTip.find(query)
    .populate('author', 'firstName lastName')
    .sort({ priority: -1, createdAt: -1 });

  res.status(200).json({
    success: true,
    data: { tips }
  });
});

// @desc    Create safety tip (admin/moderator only)
// @route   POST /api/v1/safety/tips
// @access  Private/Admin/Moderator
export const createSafetyTip = asyncHandler(async (req: AuthRequest, res: Response, next: NextFunction) => {
  const tipData = {
    ...req.body,
    author: req.user.id
  };

  const tip = await SafetyTip.create(tipData);
  await tip.populate('author', 'firstName lastName');

  logger.info(`Safety tip created: ${tip.title} by ${req.user.email}`);

  res.status(201).json({
    success: true,
    message: 'Safety tip created successfully',
    data: { tip }
  });
});

// @desc    Update safety tip (admin/moderator only)
// @route   PUT /api/v1/safety/tips/:tipId
// @access  Private/Admin/Moderator
export const updateSafetyTip = asyncHandler(async (req: AuthRequest, res: Response, next: NextFunction) => {
  const { tipId } = req.params;
  
  const tip = await SafetyTip.findByIdAndUpdate(
    tipId,
    req.body,
    { new: true, runValidators: true }
  ).populate('author', 'firstName lastName');
  
  if (!tip) {
    return next(createError('Safety tip not found', 404));
  }

  logger.info(`Safety tip updated: ${tip.title} by ${req.user.email}`);

  res.status(200).json({
    success: true,
    message: 'Safety tip updated successfully',
    data: { tip }
  });
});

// @desc    Delete safety tip (admin only)
// @route   DELETE /api/v1/safety/tips/:tipId
// @access  Private/Admin
export const deleteSafetyTip = asyncHandler(async (req: AuthRequest, res: Response, next: NextFunction) => {
  const { tipId } = req.params;
  
  const tip = await SafetyTip.findById(tipId);
  if (!tip) {
    return next(createError('Safety tip not found', 404));
  }

  await tip.deleteOne();

  logger.info(`Safety tip deleted: ${tip.title} by ${req.user.email}`);

  res.status(200).json({
    success: true,
    message: 'Safety tip deleted successfully'
  });
});
