import mongoose, { Document, Schema } from 'mongoose';

export interface IThreatReport extends Document {
  userId: mongoose.Types.ObjectId;
  content: string;
  sender?: string;
  context: 'social_media' | 'direct_message' | 'email' | 'comment' | 'emergency' | 'unknown';
  threatType: string[];
  riskLevel: 'low' | 'medium' | 'high' | 'critical';
  status: 'pending_review' | 'under_investigation' | 'resolved' | 'dismissed' | 'urgent';
  autoGenerated: boolean;
  location?: string;
  evidenceUrls?: string[];
  aiAnalysis: {
    threatLevel?: number;
    detectedThreats?: string[];
    confidence?: number;
    sentiment?: string;
    patterns?: string[];
    recommendations?: string[];
    emergencyType?: string;
    immediateHelp?: boolean;
    responseGenerated?: boolean;
  };
  humanReview?: {
    reviewerId?: mongoose.Types.ObjectId;
    reviewDate?: Date;
    reviewNotes?: string;
    actionTaken?: string;
    followUpRequired?: boolean;
  };
  resolution?: {
    resolvedDate?: Date;
    resolutionType?: 'no_action' | 'warning_sent' | 'account_suspended' | 'authorities_contacted' | 'support_provided';
    resolutionNotes?: string;
    followUpActions?: string[];
  };
  relatedReports?: mongoose.Types.ObjectId[];
  metadata: {
    ipAddress?: string;
    userAgent?: string;
    timestamp?: Date;
    platform?: string;
    deviceInfo?: any;
  };
  createdAt: Date;
  updatedAt: Date;
}

const threatReportSchema = new Schema<IThreatReport>({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    index: true
  },
  content: {
    type: String,
    required: true,
    maxlength: [5000, 'Content cannot exceed 5000 characters']
  },
  sender: {
    type: String,
    maxlength: [200, 'Sender name cannot exceed 200 characters']
  },
  context: {
    type: String,
    enum: ['social_media', 'direct_message', 'email', 'comment', 'emergency', 'unknown'],
    default: 'unknown',
    index: true
  },
  threatType: [{
    type: String,
    required: true,
    enum: [
      'harassment',
      'cyberbullying', 
      'stalking',
      'hate_speech',
      'sexual_harassment',
      'doxxing',
      'impersonation',
      'threats_of_violence',
      'blackmail',
      'image_abuse',
      'domestic_violence',
      'assault',
      'other'
    ]
  }],
  riskLevel: {
    type: String,
    enum: ['low', 'medium', 'high', 'critical'],
    required: true,
    index: true
  },
  status: {
    type: String,
    enum: ['pending_review', 'under_investigation', 'resolved', 'dismissed', 'urgent'],
    default: 'pending_review',
    index: true
  },
  autoGenerated: {
    type: Boolean,
    default: false,
    index: true
  },
  location: {
    type: String,
    maxlength: [200, 'Location cannot exceed 200 characters']
  },
  evidenceUrls: [{
    type: String,
    validate: {
      validator: function(url: string) {
        return /^https?:\/\/.+/.test(url);
      },
      message: 'Evidence URLs must be valid HTTP/HTTPS URLs'
    }
  }],
  aiAnalysis: {
    threatLevel: {
      type: Number,
      min: 0,
      max: 10
    },
    detectedThreats: [String],
    confidence: {
      type: Number,
      min: 0,
      max: 1
    },
    sentiment: {
      type: String,
      enum: ['positive', 'neutral', 'negative', 'hostile']
    },
    patterns: [String],
    recommendations: [String],
    emergencyType: String,
    immediateHelp: Boolean,
    responseGenerated: Boolean
  },
  humanReview: {
    reviewerId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User'
    },
    reviewDate: Date,
    reviewNotes: {
      type: String,
      maxlength: [1000, 'Review notes cannot exceed 1000 characters']
    },
    actionTaken: {
      type: String,
      maxlength: [500, 'Action taken cannot exceed 500 characters']
    },
    followUpRequired: {
      type: Boolean,
      default: false
    }
  },
  resolution: {
    resolvedDate: Date,
    resolutionType: {
      type: String,
      enum: ['no_action', 'warning_sent', 'account_suspended', 'authorities_contacted', 'support_provided']
    },
    resolutionNotes: {
      type: String,
      maxlength: [1000, 'Resolution notes cannot exceed 1000 characters']
    },
    followUpActions: [String]
  },
  relatedReports: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'ThreatReport'
  }],
  metadata: {
    ipAddress: String,
    userAgent: String,
    timestamp: {
      type: Date,
      default: Date.now
    },
    platform: String,
    deviceInfo: mongoose.Schema.Types.Mixed
  }
}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

// Indexes for efficient querying
threatReportSchema.index({ userId: 1, createdAt: -1 });
threatReportSchema.index({ riskLevel: 1, status: 1 });
threatReportSchema.index({ context: 1, threatType: 1 });
threatReportSchema.index({ autoGenerated: 1, status: 1 });

// Virtual for time since report
threatReportSchema.virtual('timeAgo').get(function() {
  const now = new Date();
  const diff = now.getTime() - this.createdAt.getTime();
  const hours = Math.floor(diff / (1000 * 60 * 60));
  
  if (hours < 1) {
    return `${Math.floor(diff / (1000 * 60))} minutes ago`;
  } else if (hours < 24) {
    return `${hours} hours ago`;
  } else {
    return `${Math.floor(hours / 24)} days ago`;
  }
});

// Virtual for severity score
threatReportSchema.virtual('severityScore').get(function() {
  let score = 0;
  
  // Base score from risk level
  switch (this.riskLevel) {
    case 'critical': score += 10; break;
    case 'high': score += 7; break;
    case 'medium': score += 4; break;
    case 'low': score += 1; break;
  }
  
  // Add points for threat level if available
  if (this.aiAnalysis.threatLevel) {
    score += this.aiAnalysis.threatLevel;
  }
  
  // Add points for multiple threat types
  score += this.threatType.length;
  
  return Math.min(score, 20); // Cap at 20
});

// Pre-save middleware to update related fields
threatReportSchema.pre('save', function(next) {
  // Auto-escalate critical reports
  if (this.riskLevel === 'critical' && this.status === 'pending_review') {
    this.status = 'urgent';
  }
  
  // Set metadata timestamp if not set
  if (!this.metadata.timestamp) {
    this.metadata.timestamp = new Date();
  }
  
  next();
});

// Static method to get reports by user
threatReportSchema.statics.getByUser = function(userId: string, options: any = {}) {
  const {
    limit = 20,
    offset = 0,
    status,
    riskLevel,
    fromDate,
    toDate
  } = options;

  let query: any = { userId };
  
  if (status) query.status = status;
  if (riskLevel) query.riskLevel = riskLevel;
  
  if (fromDate || toDate) {
    query.createdAt = {};
    if (fromDate) query.createdAt.$gte = new Date(fromDate);
    if (toDate) query.createdAt.$lte = new Date(toDate);
  }

  return this.find(query)
    .sort({ createdAt: -1 })
    .limit(limit)
    .skip(offset)
    .populate('userId', 'firstName lastName email')
    .populate('humanReview.reviewerId', 'firstName lastName');
};

// Static method to get statistics
threatReportSchema.statics.getStats = function(options: any = {}) {
  const {
    userId,
    fromDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 30 days ago
    toDate = new Date()
  } = options;

  let matchStage: any = {
    createdAt: { $gte: fromDate, $lte: toDate }
  };

  if (userId) matchStage.userId = new mongoose.Types.ObjectId(userId);

  return this.aggregate([
    { $match: matchStage },
    {
      $group: {
        _id: null,
        total: { $sum: 1 },
        critical: { $sum: { $cond: [{ $eq: ['$riskLevel', 'critical'] }, 1, 0] } },
        high: { $sum: { $cond: [{ $eq: ['$riskLevel', 'high'] }, 1, 0] } },
        medium: { $sum: { $cond: [{ $eq: ['$riskLevel', 'medium'] }, 1, 0] } },
        low: { $sum: { $cond: [{ $eq: ['$riskLevel', 'low'] }, 1, 0] } },
        pending: { $sum: { $cond: [{ $eq: ['$status', 'pending_review'] }, 1, 0] } },
        resolved: { $sum: { $cond: [{ $eq: ['$status', 'resolved'] }, 1, 0] } },
        autoGenerated: { $sum: { $cond: ['$autoGenerated', 1, 0] } }
      }
    }
  ]);
};

export const ThreatReport = mongoose.model<IThreatReport>('ThreatReport', threatReportSchema);
